#!/bin/bash

# Set up some things
TOKEN_TMPDIR="${TMPDIR:-/tmp}"
TOKEN_CACHE="$TOKEN_TMPDIR/bw.token"

if [ "$1" = "pass-only" ]; then
  PASS_ONLY=true
else
  PASS_ONLY=false
fi

# JavaScript
javascript_escape() {
  sed "s,[\\\\'\"\/],\\\\&,g" <<< "$1"
}

js() {
cat <<EOF
    function isVisible(elem) {
        var style = elem.ownerDocument.defaultView.getComputedStyle(elem, null);
        if (style.getPropertyValue("visibility") !== "visible" ||
            style.getPropertyValue("display") === "none" ||
            style.getPropertyValue("opacity") === "0") {
            return false;
        }
        return elem.offsetWidth > 0 && elem.offsetHeight > 0;
    };
    function hasPasswordField(form) {
        var inputs = form.getElementsByTagName("input");
        for (var j = 0; j < inputs.length; j++) {
            var input = inputs[j];
            if (input.type == "password") {
                return true;
            }
        }
        return false;
    };
    function loadData2Form (form) {
        var inputs = form.getElementsByTagName("input");
        for (var j = 0; j < inputs.length; j++) {
            var input = inputs[j];
            if (isVisible(input) && (input.type == "text" || input.type == "email")) {
                input.focus();
                input.value = "$(javascript_escape "${USERNAME}")";
                input.dispatchEvent(new Event('change'));
                input.blur();
            }
            if (input.type == "password") {
                input.focus();
                input.value = "$(javascript_escape "${PASSWORD}")";
                input.dispatchEvent(new Event('change'));
                input.blur();
            }
        }
    };
    var forms = document.getElementsByTagName("form");
    if("$(javascript_escape "${QUTE_URL}")" == window.location.href) {
        for (i = 0; i < forms.length; i++) {
            if (hasPasswordField(forms[i])) {
              loadData2Form(forms[i]);
            }
        }
    } else {
        alert("Secrets will not be inserted.\nUrl of this page and the one where the user script was started differ.");
    }
EOF
}

# Parse out URL and log to the browser
URL=$(echo "$QUTE_URL" | awk -F/ '{print $3}' | sed 's/www.//g')
echo "message-info 'Looking for password for $URL'" >> "$QUTE_FIFO"

# Get session token, or log in if missing/invalid
if [ -f "$TOKEN_CACHE" ]; then
  TOKEN=$(cat "$TOKEN_CACHE")
  bw unlock --check --session "$TOKEN" | rg 'unlocked' >> /dev/null
  UNLOCKED=$(echo $?)
  if [ $UNLOCKED -ne 0 ]; then
    TOKEN=$(bw unlock $(rofi -dmenu -l 0 -password -p "Master password: ") --raw)
    echo "$TOKEN" > "$TOKEN_CACHE"
  fi
else
  TOKEN=$(bw unlock $(rofi -dmenu -l 0 -password -p "Master password: ") --raw)
  echo "$TOKEN" > "$TOKEN_CACHE"
fi

if [ -z "$TOKEN" ]; then
  echo "message-error 'Could not get a token from BW'" >> "$QUTE_FIFO"
  exit 1
fi

# Get username/password pair
if [ -n "$TOKEN" ]; then
  # Fetch from API
  CACHE=$(bw list items --url="$URL" --session="$TOKEN")

  # Get the username we want
  COUNT=$(echo $CACHE | jq '. | length')
  if [ $COUNT -eq 1 ]; then
    USERNAME=$(echo $CACHE | jq -r '.[0].login.username')
  elif [ $COUNT -eq 0 ]; then
    echo "message-error 'No entry found for $URL'" >> "$QUTE_FIFO"
    exit 1
  else
    USERNAME=$(echo $CACHE | jq -r '.[] | .login.username' | rofi -dmenu -p "Select Entry: ")
  fi

  # Get the password we want
  PASSWORD=$(echo $CACHE | jq --arg user "$USERNAME" -r '.[] | select(.login.username == $user) | .login.password')

  # Do something with the credentials
  if [ "$PASS_ONLY" = true ]; then
    echo -ne $PASSWORD | xclip -in -selection clipboard
    echo "message-info 'Pasted password into clipboard'" >> "$QUTE_FIFO"
  else
    printjs() {
      js | sed 's,//.*$,,' | tr '\n' ' '
    }
    echo "jseval -q $(printjs)" >> "$QUTE_FIFO"
  fi
fi
